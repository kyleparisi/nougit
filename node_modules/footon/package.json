{
  "name": "footon",
  "preferGlobal": true,
  "version": "0.3.10",
  "description": "simple file-system based JSON store with querying",
  "main": "./src/footon.js",
  "dependencies": {
    "commander": "1.1.1",
    "cli-color": "0.2.2",
    "restify": "2.2.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gordonwritescode/footon.git"
  },
  "keywords": [
    "json store",
    "file store",
    "json database"
  ],
  "author": {
    "name": "Gordon Hall",
    "email": "gordon@gordonwritescode.com"
  },
  "license": "MIT",
  "bin": {
    "footon": "src/cli.js"
  },
  "readme": "```\n    ______            __            \n   / ____/___  ____  / /_____  ____ \n  / /_  / __ \\/ __ \\/ __/ __ \\/ __ \\\n / __/ / /_/ / /_/ / /_/ /_/ / / / /\n/_/    \\____/\\____/\\__/\\____/_/ /_/ \n                                    \n```\n\n**footon** is a simple file-system based JSON store with querying, with support for remote connections.\n\n## what footon is good for\n\nAt it's core, footon is a JavaScript interface for creating organized collections of JSON documents \non the filesystem. It's a simple psuedo-database that could be ideal for packaged applications with \nthe need to persist small amounts of data between sessions. Once a \"collection\" is read, it's \ncontents are stored in memory. It is a lightweight solution for applications needing to remember user \nconfiguration or other data.\n\n## installation\n\nUsing Node Package Manager\n\n```\n$ npm install footon -g\n```\n\n## basic usage\n\nUsing database named \"music\", create a new collection of \"playlists\" and save a playlist document to it.\n\n```javascript\n// require footon and select the music database\nvar footon = require('footon')\n  , music = footon('music');\n\n// create a playlist document\nvar punkrock = {\n\tname : 'Punk Rock',\n\tsongs : [\n\t\t{ \n\t\t\tartist : 'Bad Religion', \n\t\t\talbum : 'How Could Hell Be Any Worse?', \n\t\t\ttrack : 'F*** Armageddon, This Is Hell' \n\t\t},\n\t\t{\n\t\t\tartist : 'Minor Threat', \n\t\t\talbum : 'Minor Threat EP', \n\t\t\ttrack : 'Seeing Red'\n\t\t}\n\t],\n\trating : 5\n};\n\n// when the database is ready, get the playlists collection\n// and save our playlist document to it\nmusic.on('ready', function() {\n\tvar playlists = music.get('playlists');\n\tplaylists.add(punkrock);\n});\n\n\n```\n\nNow we can use the playlist and operate on it.\n\n```javascript\npunkrock.songs.push({\n\tartist : 'Dead Kennedys', \n\talbum : 'Fresh Fruit For Rotting Vegetables', \n\ttrack : 'I Kill Children'\n});\n```\n\nTo commit your changes to disk, call `Collection.save()`\n\n```javascript\nplaylists.save(function(err) {\n\tconsole.log(err || 'Changes saved!');\n});\n```\n\nEvery document has a `__id` property, which can be used to target it directly using the `find()` \nmethod.\n\n```javascript\nplaylists.find({ __id : '42' }); // returns single document\n// this works too!\nplaylists.find('42'); // returns single document\n```\n\nYou can also use this method to query documents, by passing in other properties to be matched.\nThere is also support for \"or\"-style queries, by passing an array of objects to query against.\n\n```javascript\nplaylists.find({ rating : 5 }); // returns array of documents with a rating of 5\n```\n\n## Public API\n\n#### footon(database_name String)\n\nReturns an instance of `footon.Database` and populates it. If an existing database does not exist, it is created.  \nInherits from `EventEmitter`.\n\n```javascript\nvar myDatabase = footon('myDatabase');\n\nmyDatabase.on('ready', function() {\n\t// do stuff here\n});\n```\n\n#### footon.createServer(port Number, onReady Function)\n\nReturns an instance of `footon.Server`.\n\n#### footon.createConnection(host String, port Number, user String, pass String)\n\nReturns an instance of `Connection`.\n\n## Command Line Interface\n\nFooton comes with the `footon` command line program. This program allows you to query your databases from the command line as well as start the Footon Server. This exposes a REST api allowing remote requests to query the database as well as allowing remote applications to use footon over a socket connection via an identical API.\n\nThe default port is `3333`. REST API listens on the next port  up (`3334`). If you tell footon to listen on `8080`, the REST API will listen on `8081`.\n\n### Querying \n\nFor more details usage information do:\n\n\t$ footon --help\n\nTo query the collection \"test\" in database \"test\" do:\n\n\t$ footon -d test -c test -q {\"name\":\"Gordon\"}\n\nThis would print a list of document where `name` is `\"Gordon\"`.\n\n### Footon Server\n\nTo start the server on the default port:\n\n\t$ footon -d <database> -S\n\nThis will start the server and respond to requests with JSON or JSONP (if a `callback` parameter is specified in the request). Below is an example request to perform the same query above remotely.\n\n\tRequest URL : http://localhost:3334/<database>/<collection>?query={\"prop\":\"val\"}\n\tRequest Method : GET\n\t\n### Using a Remote Footon Server\n\nThe footon API is almost exactly the same when connecting to a remote server. The difference is in how you obtain the `Database` instance.\n\n```javascript\nvar connection = footon.createConnection('127.0.0.1', 3333);\n\nconnection.on('ready', function(db) { // callback gets a ready Database instance\n\tvar test = db.get('test');\n\ttest.add({\n\t\taddedRemotely : true,\n\t\tdate : new Date().toDateString()\n\t});\n\t// update remote database manually\n\t// automatically happens when the connection closes\n\tdb.save();\n});\n```\n\n## Class Reference\n\n#### footon.Database\n\n##### Database.load()\n\nLoads the database collections into memory. Emits a `\"ready\"` event when finished.\n\n##### Database.get(collection_name String)\n\nReturns an existing `Collection` or creates a new one.\n\n##### Database.remove()\n\nDeletes database from disk.\n\n##### Database.init(callback Function)\n\nInitializes a Git repository for the database. Automatically called on instantiation if uninitialized.\n\n##### Database.versions(callback Function)\n\nPasses an array of commits to the callback.\n\n##### Database.rollback(hash String, callback Function)\n\nResets the database back to a specific version based on the commit hash.\n\n#### footon.Collection\n\n##### Collection.find(query Object)\n\nReturns an array of matched documents from the collection. If an array of object is passed, they are queried against \"$or\"-style. This method is recursive and will query sub-objects and arrays.\n\n##### Collection.add(document Object)\n\nReturns a `Document` from the object passed and passes callback to `Collection.save()` which is called automatically.\n\n##### Collection.save(callback Function, sync Boolean)\n\nWrites the current state of the collection to disk, then fires the passed `callback` if it exists. Defaults to asynchronous, but will perform synchronous write if `sync` is set to `true`. All collections are written synchronously to disk on `process.exit`.\n\n#### footon.Document\n\n##### Document.remove()\n\nRemoves the document from it's collection.\n\n#### footon.Server\n\n##### Server.listen(port)\n\nStarts the query server on the specified port. Defaults to `3333`.\n\n##### Server.setRestEndpoints()\n\nSets up REST API routing. Automatically called on instantiation.\n\n##### Server.handleRemoteRequests()\n\nHandles incoming data from remote client.\n\n#### footon.Connection\n\n##### Connection.close()\n\nCloses the connection with the remote server.",
  "readmeFilename": "README.md",
  "_id": "footon@0.3.10",
  "dist": {
    "shasum": "8ee7af71283b24ae9be0d01c267fcbbb01bc4cf3"
  },
  "_from": "footon@",
  "_resolved": "https://registry.npmjs.org/footon/-/footon-0.3.10.tgz"
}
