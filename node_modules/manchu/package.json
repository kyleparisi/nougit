{
  "name": "manchu",
  "preferGlobal": false,
  "version": "0.2.0",
  "author": {
    "name": "Gordon Hall",
    "email": "gordon@gordonwritescode.com"
  },
  "description": "carefree handlebars template pre-compilation at runtime",
  "contributors": [],
  "main": "./src/manchu.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/gordonwritescode/manchu.git"
  },
  "keywords": [
    "handlebars",
    "pre-compilation"
  ],
  "dependencies": {
    "uglify-js": "2.2.4",
    "less": "1.3.3",
    "handlebars": "1.0.8",
    "cli-color": "0.2.1"
  },
  "analyze": false,
  "license": "MIT",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "manchu\n======\n\nfu manchu does not obtain his mighty 'stache without, first, pre-compiling it.\n\n## about\n\nmanchu is an easy way to create build directives at your application runtime. it supports the following otherwise manual tasks:\n\n* handlebars template pre-compilation\n* css/less concatenation and compilation\n* javascript compression and concatenation\n\n## installation\n\n\t$ npm install manchu\n\n## usage\n\nthis example illustrates how you might do the following:\n\n1. precompile a directory of handlebars templates\n2. uglify a directory of javascript files\n3. concatenate selected css and less files and minify\n\n```javascript\nvar manchu = require('manchu')\n  , templates\n  , scripts,\n  , styles;\n\ntemplates = manchu.createDirective({\n\ttype : 'handlebars',\n\tinput : __dirname + '/templates',\n\toutput : __dirname + '/public/scripts/templates.js'\n});\n\nscripts = manchu.createDirective({\n\ttype : 'javascript',\n\tinput : __dirname + '/scripts',\n\toutput : __dirname + '/public/scripts/app.js'\n});\n\nstyles = manchu.createDirective({\n\ttype : 'stylesheet',\n\tinput : __dirname + '/styles',\n\toutput : __dirname + '/public/styles/styles.css'\n});\n\nmanchu.build([\n\ttemplates,\n\tstyles,\n\tscripts\n], function() {\n\t// start your server or something\n});\n```\n\n## public api\n\n### manchu.createDirective(options)\n\nReturns a new `Directive` instance. The argument `options` takes the following properties.\n\n* **type** - *String* ('handlebars', 'javascript', 'stylesheet')\n\t* Type will determine whether to precompile handlebars templates, uglify JavaScript files, or compile LESS\n* **input** - *String* or *Array*\n\t* This can be a string path to a directory of files to use or and array of individual files or directories\n\t* The directory read is not recursive and will only read the immediate children of the directory\n* **output** - *String*\n\t* Path to the desired output file.\n\n### manchu.build(directives, callback)\n\nAccepts an array of `Directive`s and executes them in sequence.\n\n* **directives** - *Array*\n\t* Pass an array of `manchu.Directive` instances\n* **callback** - *Function*\n\t* Gets called upon successful build of all directives\n\nReturns a new instance\n\n## class reference\n\n### manchu.Builder\n\n### manchu.Directive",
  "readmeFilename": "README.md",
  "_id": "manchu@0.2.0",
  "dist": {
    "shasum": "bd154bc803fd747e9bd637e3da73c47967f51d05"
  },
  "_from": "manchu@",
  "_resolved": "https://registry.npmjs.org/manchu/-/manchu-0.2.0.tgz"
}
